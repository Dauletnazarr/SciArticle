import logging
import os
import sys

import django

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sciarticle.settings")
django.setup()

from telegram.ext import Application, CallbackQueryHandler, CommandHandler, MessageHandler, filters

from src.bot.handlers.callback_handlers import handle_vote_callback
from src.bot.handlers.doi_request import handle_request
from src.bot.handlers.file_handlers import handle_pdf_upload
from src.bot.models import ChatUser, Config, Subscription

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "")


async def start(update, context):
    """Start command handler - registers user and sends welcome message."""
    user = update.effective_user

    chat_user, created = ChatUser.objects.get_or_create(
        telegram_id=user.id,
        defaults={
            'username': user.username or user.first_name,
            'is_in_bot': True
        }
    )

    if not chat_user.is_in_bot:
        chat_user.is_in_bot = True
        chat_user.save()

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø SciArticleBot.\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ DOI.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/request <DOI> - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ DOI\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    )

    await update.message.reply_text(welcome_message)


async def stats_command(update, context):
    """Handler for the /stats command - shows user statistics."""
    user_id = update.effective_user.id

    try:
        user = ChatUser.objects.get(telegram_id=user_id)

        active_subs = Subscription.objects.filter(
            user=user,
            end_date__gt=django.utils.timezone.now()
        ).order_by('-end_date')

        sub_status = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
        if active_subs.exists():
            sub = active_subs.first()
            days_left = (sub.end_date - django.utils.timezone.now()).days
            sub_status = f"–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {sub.end_date.strftime('%d.%m.%Y')} ({days_left} –¥–Ω–µ–π)"

        config = Config.get_instance()

        uploads = user.uploads_count
        validations = user.validations_count
        uploads_needed = config.uploads_for_subscription - (uploads % config.uploads_for_subscription)
        validations_needed = config.validations_for_subscription - (validations % config.validations_for_subscription)

        stats_text = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ PDF: {uploads}\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ PDF: {validations}\n\n"
            f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_status}\n\n"
            f"–î–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å:\n"
            f"- –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ {uploads_needed} PDF\n"
            f"- –ò–õ–ò –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ {validations_needed} PDF"
        )

        await update.message.reply_text(stats_text)

    except ChatUser.DoesNotExist:
        await update.message.reply_text(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )


async def help_command(update, context):
    """Handler for the /help command."""
    help_text = (
        "üîç *SciArticleBot* - –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/request <DOI> - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ DOI\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "1. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Å—Ç–∞—Ç—å—é –ø–æ DOI\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç PDF\n"
        "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π PDF –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º\n"
        "4. –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏"
    )

    await update.message.reply_text(help_text, parse_mode="Markdown")


def main():
    """Main function to start the bot."""
    if not TELEGRAM_TOKEN:
        logger.error("No TELEGRAM_BOT_TOKEN provided")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("request", handle_request))

    application.add_handler(MessageHandler(
        filters.Document.PDF, handle_pdf_upload
    ))

    application.add_handler(CallbackQueryHandler(
        handle_vote_callback, pattern="^vote_"
    ))

    application.add_error_handler(lambda update, context:
        logger.error(f"Update {update} caused error: {context.error}")
    )

    application.run_polling()

    logger.info("Bot started")


if __name__ == "__main__":
    main()
